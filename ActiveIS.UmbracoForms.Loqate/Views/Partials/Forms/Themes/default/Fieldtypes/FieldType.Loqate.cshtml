@using ActiveIS.UmbracoForms.Loqate
@using ActiveIS.UmbracoForms.Loqate.Helpers
@model Umbraco.Forms.Mvc.Models.FieldViewModel
@{
    Guid formId = ViewBag.FormId;
    var allFormFields = FormHelper.GetAllFormFields(formId).ToList();

    var loqateKey = AppSettingsManager.GetLoqateKey();
    var countries = string.Empty;
    var countriesSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "Countries");
    if (countriesSetting.Value != "")
    {
        countries = countriesSetting.Value;
    }

    var limit = string.Empty;
    var limitSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "Limit");
    if (limitSetting.Value != "")
    {
        limit = limitSetting.Value;
    }

    var language = string.Empty;
    var languageSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "Language");
    if (languageSetting.Value != "")
    {
        language = languageSetting.Value;
    }

    var origin = string.Empty;
    var originSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "Origin");
    if (originSetting.Value != "")
    {
        origin = originSetting.Value;
    }

    var addressLine1Alias = string.Empty;
    var addressLine1AliasSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "AddressLine1Alias");
    if (addressLine1AliasSetting.Value != "")
    {
        var addressLine1Id = allFormFields.FirstOrDefault(x => x.Alias == addressLine1AliasSetting.Value)?.Id;
        addressLine1Alias = addressLine1Id.ToString();
    }

    var addressLine2Alias = string.Empty;
    var addressLine2AliasSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "AddressLine2Alias");
    if (addressLine2AliasSetting.Value != "")
    {
        var addressLine2Id = allFormFields.FirstOrDefault(x => x.Alias == addressLine2AliasSetting.Value)?.Id;
        addressLine2Alias = addressLine2Id.ToString();
    }

    var addressLine3Alias = string.Empty;
    var addressLine3AliasSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "AddressLine3Alias");
    if (addressLine3AliasSetting.Value != "")
    {
        var addressLine3Id = allFormFields.FirstOrDefault(x => x.Alias == addressLine3AliasSetting.Value)?.Id;
        addressLine3Alias = addressLine3Id.ToString();
    }

    var townCityAlias = string.Empty;
    var townCityAliasSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "TownCityAlias");
    if (townCityAliasSetting.Value != "")
    {
        var townCityId = allFormFields.FirstOrDefault(x => x.Alias == townCityAliasSetting.Value)?.Id;
        townCityAlias = townCityId.ToString();
    }

    var countyAlias = string.Empty;
    var countyAliasSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "CountyAlias");
    if (countyAliasSetting.Value != "")
    {
        var countyId = allFormFields.FirstOrDefault(x => x.Alias == countyAliasSetting.Value)?.Id;
        countyAlias = countyId.ToString();
    }

    var postCodeAlias = string.Empty;
    var postCodeAliasSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "PostCodeAlias");
    if (postCodeAliasSetting.Value != "")
    {
        var postCodeId = allFormFields.FirstOrDefault(x => x.Alias == postCodeAliasSetting.Value)?.Id;
        postCodeAlias = postCodeId.ToString();
    }

    var countryAlias = string.Empty;
    var countryAliasSetting = Model.AdditionalSettings.FirstOrDefault(x => x.Key == "CountryAlias");
    if (countryAliasSetting.Value != "")
    {
        var countryId = allFormFields.FirstOrDefault(x => x.Alias == countryAliasSetting.Value)?.Id;
        countryAlias = countryId.ToString();
    }

    if (!string.IsNullOrEmpty(loqateKey))
    {
    <div class="input-group mb-3">
        <input type="text" name="search" class="form-control" id="searchBox" placeholder="Enter Address" onkeypress="return enterSearch(event)">
        <div class="input-group-append">
            <button onClick="event.preventDefault(); findAddress()" class="btn btn-outline-secondary">Search</button>
        </div>
    </div>
        <div class="fieldWrap">
            <div class="error" id="errorMessage"></div>
        </div>
	
        <div class="fieldWrap">
            <div id="result"></div>
        </div>	
	
        <div class="seperator" id="seperator"></div>
    }
    else
    {
        <p class="error">ERROR: Loqate is missing the API Key - Please update the web.config to include 'key="LoqateKey"'</p>
    }
}
<script>
    function showError(message) {
        var error = document.getElementById("errorMessage");
        error.innerText = message;
        error.style.display = "block";

        setTimeout(function () {
            error.style.display = "none";
        }, 10000)
    }

    function enterSearch(e) {
        if (e.keyCode == 13) {
            findAddress();
        }
    }

    function findAddress(SecondFind) {
        var Text = document.getElementById("searchBox").value;

        if (Text === "") {
            showError("Please enter an address");
            return;
        }

        var Container = "";

        if (SecondFind !== undefined) {
            Container = SecondFind;
        }

        var Key = "@loqateKey",
            IsMiddleware = false,
            Origin = "@origin",
            Countries = "@countries",
            Limit = "@limit",
            Language = "@language",
            url = 'https://services.postcodeanywhere.co.uk/Capture/Interactive/Find/v1.10/json3.ws';
        var params = '';
        params += "&Key=" + encodeURIComponent(Key);
        params += "&Text=" + encodeURIComponent(Text);
        params += "&IsMiddleware=" + encodeURIComponent(IsMiddleware);
        params += "&Container=" + encodeURIComponent(Container);
        params += "&Origin=" + encodeURIComponent(Origin);
        params += "&Countries=" + encodeURIComponent(Countries);
        params += "&Limit=" + encodeURIComponent(Limit);
        params += "&Language=" + encodeURIComponent(Language);
        var http = new XMLHttpRequest();
        http.open('POST', url, true);
        http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        http.onreadystatechange = function () {
            if (http.readyState == 4 && http.status == 200) {
                var response = JSON.parse(http.responseText);
                if (response.Items.length == 1 && typeof (response.Items[0].Error) != "undefined") {
                    showError(response.Items[0].Description);
                }
                else {
                    if (response.Items.length == 0)
                        showError("Sorry, there were no results");

                    else {
                        var resultBox = document.getElementById("result");

                        if (resultBox.childNodes.length > 0) {
                            var selectBox = document.getElementById("mySelect");
                            selectBox.parentNode.removeChild(selectBox)
                        }

                        var resultArea = document.getElementById("result");
                        var list = document.createElement("select");
                        list.id = "selectList";
                        list.setAttribute("id", "mySelect");
                        resultArea.appendChild(list);

                        var defaultOption = document.createElement("option");
                        defaultOption.text = "Select Address";
                        defaultOption.setAttribute("value", "");
                        defaultOption.setAttribute("selected", "selected");
                        list.appendChild(defaultOption);

                        for (var i = 0; i < response.Items.length; i++) {
                            var option = document.createElement("option");
                            option.setAttribute("value", response.Items[i].Id)
                            option.text = response.Items[i].Text + " " + response.Items[i].Description;
                            option.setAttribute("class", response.Items[i].Type)

                            list.appendChild(option);
                        }
                        selectAddress(Key);
                    }
                }
            }
        }
        http.send(params);
    };

    function selectAddress(Key) {
        var resultList = document.getElementById("result");

        if (resultList.childNodes.length > 0) {
            var elem = document.getElementById("mySelect");

            //IE fix
            elem.onchange = function (e) {

                var target = e.target[e.target.selectedIndex];

                if (target.text === "Select Address") {
                    return;
                }

                if (target.className === "Address") {
                    retrieveAddress(Key, target.value);
                }

                else {
                    findAddress(target.value)
                }
            };
        }
    };

    function retrieveAddress(Key, Id) {
        var Field1Format = "";
        var url = 'https://services.postcodeanywhere.co.uk/Capture/Interactive/Retrieve/v1.00/json3.ws';
        var params = '';
        params += "&Key=" + encodeURIComponent(Key);
        params += "&Id=" + encodeURIComponent(Id);
        params += "&Field1Format=" + encodeURIComponent(Field1Format);

        var http = new XMLHttpRequest();
        http.open('POST', url, true);
        http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        http.onreadystatechange = function () {
            if (http.readyState == 4 && http.status == 200) {
                var response = JSON.parse(http.responseText);

                if (response.Items.length == 1 && typeof (response.Items[0].Error) != "undefined") {
                    showError(response.Items[0].Description);
                }
                else {
                    if (response.Items.length == 0)
                        showError("Sorry, there were no results");
                    else {
                        var res = response.Items[0];
                        @if (!string.IsNullOrEmpty(addressLine1Alias))
                        {
                            <text>$('#@addressLine1Alias').val(res.Line1);</text>
                        }

                        @if (!string.IsNullOrEmpty(addressLine2Alias))
                        {
                            <text>$('#@addressLine2Alias').val(res.Line2);</text>
                        }

                        @if (!string.IsNullOrEmpty(addressLine3Alias))
                        {
                            <text>$('#@addressLine3Alias').val(res.Line3);</text>
                        }

                        @if (!string.IsNullOrEmpty(townCityAlias))
                        {
                            <text>$('#@townCityAlias').val(res.City);</text>
                        }

                        @if (!string.IsNullOrEmpty(countyAlias))
                        {
                            <text>$('#@countyAlias').val(res.AdminAreaName);</text>
                        }

                        @if (!string.IsNullOrEmpty(postCodeAlias))
                        {
                            <text>$('#@postCodeAlias').val(res.PostalCode);</text>
                        }

                        @if (!string.IsNullOrEmpty(countryAlias))
                        {
                            <text>$('#@countryAlias').val(res.CountryName);</text>
                        }
                    }
                }
            }
        }
        http.send(params);
    }
</script>